name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'core/**', 'app.py', 'requirements.txt' ]
  pull_request:
    branches: [ main ]
    paths: [ 'core/**', 'app.py', 'requirements.txt' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit
    
    - name: Run security audit
      run: bandit -r core/ app.py
    
    - name: Run type checking
      run: |
        pip install mypy
        mypy core/ app.py --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=core --cov=app --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render Staging
      uses: render-actions/deploy@v1
      with:
        service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
    
    - name: Run health check
      run: |
        sleep 60
        curl -f ${{ secrets.RENDER_STAGING_URL }}/api/health || exit 1

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render Production
      uses: render-actions/deploy@v1
      with:
        service-id: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
    
    - name: Run health check
      run: |
        sleep 60
        curl -f https://fikirisolutions.com/api/health || exit 1
    
    - name: Run database migrations
      run: |
        curl -X POST https://fikirisolutions.com/api/database/migrations/run
    
    - name: Clear cache
      run: |
        curl -X POST https://fikirisolutions.com/api/cache/clear
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Backend deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  performance-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run scripts/k6-performance-test.js
      env:
        API_BASE_URL: https://fikirisolutions.com

