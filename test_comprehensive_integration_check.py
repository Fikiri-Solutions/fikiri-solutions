#!/usr/bin/env python3
"""
Comprehensive Integration Check for Fikiri Solutions
Verifies all AI Email Assistant features work together and don't break existing functionality
"""

import sys
import os
sys.path.append('.')

def test_core_imports():
    """Test that all core modules import correctly"""
    print("üß™ Testing Core Module Imports")
    print("=" * 50)
    
    try:
        # Test existing core modules
        from core.minimal_ai_assistant import MinimalAIEmailAssistant, create_ai_assistant
        from core.minimal_crm_service import MinimalCRMService
        from core.minimal_email_actions import MinimalEmailActions
        from core.minimal_config import get_config
        from core.redis_service import get_redis_client
        from core.redis_queues import get_redis_queue
        
        print("‚úÖ Existing core modules import successfully")
        
        # Test new advanced modules
        from core.advanced_email_templates import get_email_templates
        from core.advanced_sentiment_analyzer import get_sentiment_analyzer
        from core.multi_language_support import get_multi_language_support
        from core.email_scheduling_system import get_email_scheduler
        from core.advanced_analytics_system import get_analytics_system
        
        print("‚úÖ New advanced modules import successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Core imports failed: {e}")
        return False

def test_ai_assistant_integration():
    """Test AI Assistant integration with all features"""
    print("\nüß™ Testing AI Assistant Integration")
    print("=" * 50)
    
    try:
        from core.minimal_ai_assistant import MinimalAIEmailAssistant
        
        assistant = MinimalAIEmailAssistant()
        
        # Test basic functionality still works
        print(f"‚úÖ AI Assistant enabled: {assistant.is_enabled()}")
        
        # Test usage stats
        stats = assistant.get_usage_stats()
        print(f"‚úÖ Usage stats: {stats}")
        
        # Test email classification
        classification = assistant.classify_email_intent(
            "I'm interested in your landscaping services",
            "Quote Request"
        )
        print(f"‚úÖ Email classification: {classification['intent']}")
        
        # Test response generation
        response = assistant.generate_response(
            "I need help with my account",
            "John Doe",
            "Account Help",
            "support_request"
        )
        print(f"‚úÖ Response generation: {len(response)} characters")
        
        # Test contact extraction
        contact_info = assistant.extract_contact_info(
            "My phone is 555-123-4567 and I work at ABC Corp"
        )
        print(f"‚úÖ Contact extraction: {contact_info}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå AI Assistant integration test failed: {e}")
        return False

def test_advanced_features_integration():
    """Test integration between all advanced features"""
    print("\nüß™ Testing Advanced Features Integration")
    print("=" * 50)
    
    try:
        from core.minimal_ai_assistant import MinimalAIEmailAssistant
        from core.advanced_email_templates import get_email_templates
        from core.advanced_sentiment_analyzer import get_sentiment_analyzer
        from core.multi_language_support import get_multi_language_support
        from core.email_scheduling_system import get_email_scheduler
        from core.advanced_analytics_system import get_analytics_system
        
        # Initialize all systems
        assistant = MinimalAIEmailAssistant()
        templates = get_email_templates()
        sentiment_analyzer = get_sentiment_analyzer()
        multi_lang = get_multi_language_support()
        scheduler = get_email_scheduler()
        analytics = get_analytics_system()
        
        print("‚úÖ All advanced systems initialized")
        
        # Test integrated workflow
        test_message = "I'm very frustrated with the slow response time! Can you help me schedule a follow-up email?"
        
        # 1. Sentiment Analysis
        if sentiment_analyzer:
            sentiment_result = sentiment_analyzer.analyze_sentiment(test_message)
            print(f"‚úÖ Sentiment analysis: {sentiment_result.sentiment} ({sentiment_result.urgency})")
        
        # 2. Language Detection
        if multi_lang:
            lang_result = multi_lang.detect_language(test_message)
            print(f"‚úÖ Language detection: {lang_result.language} ({lang_result.language_code})")
        
        # 3. Template Generation
        template_result = templates.generate_email_content(
            "landscaping_quote_request",
            {
                "sender_name": "Test User",
                "company_name": "Fikiri Solutions",
                "service_type": "landscaping",
                "service_specialties": "residential landscaping, commercial maintenance",
                "service_areas": "lawn care, planting, hardscaping",
                "user_name": "AI Assistant",
                "contact_info": "support@fikirisolutions.com"
            }
        )
        print(f"‚úÖ Template generation: {template_result.get('subject', 'Failed')[:30]}...")
        
        # 4. Analytics Tracking
        analytics.track_metric("integration_test", 1, "count", "testing")
        print("‚úÖ Analytics tracking: Success")
        
        # 5. Email Scheduling
        from datetime import datetime, timedelta
        future_time = datetime.now() + timedelta(hours=1)
        schedule_result = scheduler.schedule_email(
            user_id=1,
            recipient_email="test@example.com",
            subject="Integration Test",
            body="This is an integration test email",
            scheduled_time=future_time
        )
        print(f"‚úÖ Email scheduling: {schedule_result.get('success', False)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Advanced features integration test failed: {e}")
        return False

def test_backend_integration():
    """Test backend integration with existing systems"""
    print("\nüß™ Testing Backend Integration")
    print("=" * 50)
    
    try:
        # Test app.py imports
        import app
        print("‚úÖ Main app.py imports successfully")
        
        # Test service initialization
        from core.minimal_config import get_config
        config = get_config()
        print(f"‚úÖ Config loaded: Redis URL configured: {bool(getattr(config, 'redis_url', None))}")
        
        # Test Redis connection
        from core.redis_service import get_redis_client
        redis_client = get_redis_client()
        if redis_client:
            print("‚úÖ Redis client connected")
        else:
            print("‚ö†Ô∏è Redis client not connected (expected in test environment)")
        
        # Test existing API endpoints still work
        from core.minimal_crm_service import MinimalCRMService
        crm_service = MinimalCRMService()
        leads = crm_service.get_all_leads()
        print(f"‚úÖ CRM service: {len(leads)} leads found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Backend integration test failed: {e}")
        return False

def test_frontend_integration():
    """Test frontend integration"""
    print("\nüß™ Testing Frontend Integration")
    print("=" * 50)
    
    try:
        # Test AI Assistant page integration
        import os
        frontend_path = "frontend/src/pages/AIAssistant.tsx"
        if os.path.exists(frontend_path):
            print("‚úÖ AI Assistant page exists")
            
            # Check if the page imports the necessary components
            with open(frontend_path, 'r') as f:
                content = f.read()
                
            if "DemoVideoModal" in content:
                print("‚úÖ Demo Video Modal integrated")
            if "formatAIResponse" in content:
                print("‚úÖ AI Response formatting integrated")
            if "simulateTyping" in content:
                print("‚úÖ Typing simulation integrated")
        else:
            print("‚ö†Ô∏è AI Assistant page not found")
        
        # Test API client integration
        api_client_path = "frontend/src/services/apiClient.ts"
        if os.path.exists(api_client_path):
            print("‚úÖ API client exists")
            
            with open(api_client_path, 'r') as f:
                content = f.read()
                
            if "sendChatMessage" in content:
                print("‚úÖ Chat message API integrated")
        else:
            print("‚ö†Ô∏è API client not found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Frontend integration test failed: {e}")
        return False

def test_error_handling():
    """Test error handling and fallbacks"""
    print("\nüß™ Testing Error Handling and Fallbacks")
    print("=" * 50)
    
    try:
        from core.minimal_ai_assistant import MinimalAIEmailAssistant
        
        # Test with missing OpenAI API key
        assistant = MinimalAIEmailAssistant()
        
        # Test fallback classification
        classification = assistant.classify_email_intent("Test email", "Test subject")
        print(f"‚úÖ Fallback classification: {classification['intent']}")
        
        # Test fallback response generation
        response = assistant.generate_response("Test", "User", "Subject", "general")
        print(f"‚úÖ Fallback response: {len(response)} characters")
        
        # Test fallback contact extraction
        contact_info = assistant.extract_contact_info("Test contact info")
        print(f"‚úÖ Fallback contact extraction: {contact_info}")
        
        # Test chat response with missing dependencies
        chat_response = assistant.generate_chat_response("Test message")
        print(f"‚úÖ Fallback chat response: {chat_response.get('success', False)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
        return False

def test_performance():
    """Test performance and memory usage"""
    print("\nüß™ Testing Performance")
    print("=" * 50)
    
    try:
        import time
        import psutil
        import os
        
        # Get initial memory usage
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # Test multiple operations
        from core.minimal_ai_assistant import MinimalAIEmailAssistant
        from core.advanced_email_templates import get_email_templates
        from core.advanced_analytics_system import get_analytics_system
        
        start_time = time.time()
        
        # Perform multiple operations
        for i in range(10):
            assistant = MinimalAIEmailAssistant()
            templates = get_email_templates()
            analytics = get_analytics_system()
            
            # Track metrics
            analytics.track_metric(f"perf_test_{i}", i, "count", "testing")
            
            # Generate template
            templates.generate_email_content(
                "landscaping_quote_request",
                {"sender_name": f"User {i}", "company_name": "Test Co"}
            )
        
        end_time = time.time()
        
        # Get final memory usage
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory
        
        print(f"‚úÖ Performance test completed in {end_time - start_time:.2f} seconds")
        print(f"‚úÖ Memory usage: {initial_memory:.1f}MB ‚Üí {final_memory:.1f}MB (+{memory_increase:.1f}MB)")
        
        if memory_increase < 50:  # Less than 50MB increase
            print("‚úÖ Memory usage is acceptable")
        else:
            print("‚ö†Ô∏è High memory usage detected")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False

def test_data_consistency():
    """Test data consistency across systems"""
    print("\nüß™ Testing Data Consistency")
    print("=" * 50)
    
    try:
        from core.minimal_crm_service import MinimalCRMService
        from core.advanced_analytics_system import get_analytics_system
        
        # Test CRM data consistency
        crm_service = MinimalCRMService()
        leads = crm_service.get_all_leads()
        print(f"‚úÖ CRM data consistency: {len(leads)} leads")
        
        # Test analytics data consistency
        analytics = get_analytics_system()
        summary = analytics.get_metrics_summary()
        print(f"‚úÖ Analytics data consistency: {summary.get('total_metrics', 0)} metrics")
        
        # Test template data consistency
        from core.advanced_email_templates import get_email_templates
        templates = get_email_templates()
        stats = templates.get_template_statistics()
        print(f"‚úÖ Template data consistency: {stats['total_templates']} templates")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Data consistency test failed: {e}")
        return False

def main():
    """Run comprehensive integration tests"""
    print("üîç Comprehensive Integration Check for Fikiri Solutions")
    print("=" * 70)
    
    tests = [
        test_core_imports,
        test_ai_assistant_integration,
        test_advanced_features_integration,
        test_backend_integration,
        test_frontend_integration,
        test_error_handling,
        test_performance,
        test_data_consistency
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with exception: {e}")
    
    print("\n" + "=" * 70)
    print(f"üéØ Integration Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ ALL INTEGRATIONS WORKING PERFECTLY!")
        print("‚úÖ AI Email Assistant features are fully integrated")
        print("‚úÖ No existing functionality was broken")
        print("‚úÖ All systems work together seamlessly")
        print("‚úÖ Error handling and fallbacks are working")
        print("‚úÖ Performance is acceptable")
        print("‚úÖ Data consistency is maintained")
    else:
        print(f"‚ö†Ô∏è {total - passed} integration tests failed - needs attention")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
